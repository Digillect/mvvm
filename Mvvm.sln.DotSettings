<wpf:ResourceDictionary xml:space="preserve" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:ss="urn:shemas-jetbrains-com:settings-storage-xaml" xmlns:wpf="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
	<s:String x:Key="/Default/CodeStyle/CodeCleanup/RecentlyUsedProfile/@EntryValue">Default: Full Cleanup</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeCleanup/SilentCleanupProfile/@EntryValue">Default: Reformat Code</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CommonFormatter/ALIGNMENT_TAB_FILL_STYLE/@EntryValue">USE_TABS_ONLY</s:String>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ALIGN_MULTILINE_ARRAY_AND_OBJECT_INITIALIZER/@EntryValue">True</s:Boolean>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/ANONYMOUS_METHOD_DECLARATION_BRACES/@EntryValue">NEXT_LINE</s:String>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/BLANK_LINES_BETWEEN_USING_GROUPS/@EntryValue">1</s:Int64>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/BLANK_LINES_INSIDE_REGION/@EntryValue">0</s:Int64>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/CASE_BLOCK_BRACES/@EntryValue">NEXT_LINE</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/FORCE_FIXED_BRACES_STYLE/@EntryValue">ALWAYS_ADD</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/FORCE_FOR_BRACES_STYLE/@EntryValue">ALWAYS_ADD</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/FORCE_FOREACH_BRACES_STYLE/@EntryValue">ALWAYS_ADD</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/FORCE_IFELSE_BRACES_STYLE/@EntryValue">ALWAYS_ADD</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/FORCE_USING_BRACES_STYLE/@EntryValue">ALWAYS_ADD</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/FORCE_WHILE_BRACES_STYLE/@EntryValue">ALWAYS_ADD</s:String>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/INDENT_NESTED_FIXED_STMT/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/INDENT_NESTED_USINGS_STMT/@EntryValue">True</s:Boolean>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/INITIALIZER_BRACES/@EntryValue">NEXT_LINE_SHIFTED</s:String>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/KEEP_BLANK_LINES_IN_CODE/@EntryValue">1</s:Int64>
	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/KEEP_BLANK_LINES_IN_DECLARATIONS/@EntryValue">1</s:Int64>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/PLACE_CONSTRUCTOR_INITIALIZER_ON_SAME_LINE/@EntryValue">False</s:Boolean>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SIMPLE_EMBEDDED_STATEMENT_STYLE/@EntryValue">LINE_BREAK</s:String>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_BEFORE_CATCH_PARENTHESES/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_BEFORE_FIXED_PARENTHESES/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_BEFORE_FOR_PARENTHESES/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_BEFORE_FOREACH_PARENTHESES/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_BEFORE_IF_PARENTHESES/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_BEFORE_LOCK_PARENTHESES/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_BEFORE_SIZEOF_PARENTHESES/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_BEFORE_SWITCH_PARENTHESES/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_BEFORE_TYPEOF_PARENTHESES/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_BEFORE_USING_PARENTHESES/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_BEFORE_WHILE_PARENTHESES/@EntryValue">False</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_WITHIN_CATCH_PARENTHESES/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_WITHIN_FIXED_PARENTHESES/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_WITHIN_FOR_PARENTHESES/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_WITHIN_FOREACH_PARENTHESES/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_WITHIN_IF_PARENTHESES/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_WITHIN_LOCK_PARENTHESES/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_WITHIN_METHOD_CALL_PARENTHESES/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_WITHIN_METHOD_PARENTHESES/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_WITHIN_SINGLE_LINE_ARRAY_INITIALIZER_BRACES/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_WITHIN_SIZEOF_PARENTHESES/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_WITHIN_SWITCH_PARENTHESES/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_WITHIN_TYPEOF_PARENTHESES/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_WITHIN_USING_PARENTHESES/@EntryValue">True</s:Boolean>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SPACE_WITHIN_WHILE_PARENTHESES/@EntryValue">True</s:Boolean>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_ARGUMENTS_STYLE/@EntryValue">CHOP_IF_LONG</s:String>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_LINES/@EntryValue">False</s:Boolean>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_MULTIPLE_TYPE_PARAMEER_CONSTRAINTS_STYLE/@EntryValue">CHOP_ALWAYS</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_PARAMETERS_STYLE/@EntryValue">CHOP_IF_LONG</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/XmlFormatter/ProcessingInstructionAttributeIndenting/@EntryValue">OneStep</s:String>
	<s:String x:Key="/Default/CodeStyle/CodeFormatting/XmlFormatter/TagAttributeIndenting/@EntryValue">OneStep</s:String>
	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/XmlFormatter/TagSpaceBeforeHeaderEnd1/@EntryValue">False</s:Boolean>
	<s:String x:Key="/Default/CodeStyle/CSharpMemberOrderPattern/CustomPattern/@EntryValue">&lt;?xml version="1.0" encoding="utf-8" ?&gt;&#xD;
&lt;!--&#xD;
I. Overall&#xD;
&#xD;
I.1 Each pattern can have &lt;Match&gt;....&lt;/Match&gt; element. For the given type declaration, the pattern with the match, evaluated to 'true' with the largest weight, will be used &#xD;
I.2 Each pattern consists of the sequence of &lt;Entry&gt;...&lt;/Entry&gt; elements. Type member declarations are distributed between entries&#xD;
I.3 If pattern has RemoveAllRegions="true" attribute, then all regions will be cleared prior to reordering. Otherwise, only auto-generated regions will be cleared&#xD;
I.4 The contents of each entry is sorted by given keys (First key is primary,  next key is secondary, etc). Then the declarations are grouped and en-regioned by given property&#xD;
&#xD;
II. Available match operands&#xD;
&#xD;
Each operand may have Weight="..." attribute. This weight will be added to the match weight if the operand is evaluated to 'true'.&#xD;
The default weight is 1&#xD;
&#xD;
II.1 Boolean functions:&#xD;
II.1.1 &lt;And&gt;....&lt;/And&gt;&#xD;
II.1.2 &lt;Or&gt;....&lt;/Or&gt;&#xD;
II.1.3 &lt;Not&gt;....&lt;/Not&gt;&#xD;
&#xD;
II.2 Operands&#xD;
II.2.1 &lt;Kind Is="..."/&gt;. Kinds are: class, struct, interface, enum, delegate, type, constructor, destructor, property, indexer, method, operator, field, constant, event, member&#xD;
II.2.2 &lt;Name Is="..." [IgnoreCase="true/false"] /&gt;. The 'Is' attribute contains regular expression&#xD;
II.2.3 &lt;HasAttribute CLRName="..." [Inherit="true/false"] /&gt;. The 'CLRName' attribute contains regular expression&#xD;
II.2.4 &lt;Access Is="..."/&gt;. The 'Is' values are: public, protected, internal, protected internal, private&#xD;
II.2.5 &lt;Static/&gt;&#xD;
II.2.6 &lt;Abstract/&gt;&#xD;
II.2.7 &lt;Virtual/&gt;&#xD;
II.2.8 &lt;Override/&gt;&#xD;
II.2.9 &lt;Sealed/&gt;&#xD;
II.2.10 &lt;Readonly/&gt;&#xD;
II.2.11 &lt;ImplementsInterface CLRName="..."/&gt;. The 'CLRName' attribute contains regular expression&#xD;
II.2.12 &lt;HandlesEvent /&gt;&#xD;
--&gt;&#xD;
&#xD;
&lt;Patterns xmlns="urn:shemas-jetbrains-com:member-reordering-patterns"&gt;&#xD;
	&lt;!--Do not reorder COM interfaces and structs marked by StructLayout attribute--&gt;&#xD;
	&lt;Pattern&gt;&#xD;
		&lt;Match&gt;&#xD;
			&lt;Or Weight="100"&gt;&#xD;
				&lt;And&gt;&#xD;
					&lt;Kind Is="interface"/&gt;&#xD;
					&lt;Or&gt;&#xD;
						&lt;HasAttribute CLRName="System.Runtime.InteropServices.InterfaceTypeAttribute"/&gt;&#xD;
						&lt;HasAttribute CLRName="System.Runtime.InteropServices.ComImport"/&gt;&#xD;
					&lt;/Or&gt;&#xD;
				&lt;/And&gt;&#xD;
				&lt;HasAttribute CLRName="System.Runtime.InteropServices.StructLayoutAttribute"/&gt;&#xD;
			&lt;/Or&gt;&#xD;
		&lt;/Match&gt;&#xD;
	&lt;/Pattern&gt;&#xD;
&#xD;
	&lt;!--Special formatting of NUnit test fixture--&gt;&#xD;
	&lt;Pattern RemoveAllRegions="true"&gt;&#xD;
		&lt;Match&gt;&#xD;
			&lt;And Weight="100"&gt;&#xD;
				&lt;Kind Is="class"/&gt;&#xD;
				&lt;HasAttribute CLRName="NUnit.Framework.TestFixtureAttribute" Inherit="true"/&gt;&#xD;
			&lt;/And&gt;&#xD;
		&lt;/Match&gt;&#xD;
&#xD;
		&lt;!--Setup/Teardow--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And&gt;&#xD;
					&lt;Kind Is="method"/&gt;&#xD;
					&lt;Or&gt;&#xD;
						&lt;HasAttribute CLRName="NUnit.Framework.SetUpAttribute" Inherit="true"/&gt;&#xD;
						&lt;HasAttribute CLRName="NUnit.Framework.TearDownAttribute" Inherit="true"/&gt;&#xD;
						&lt;HasAttribute CLRName="NUnit.Framework.FixtureSetUpAttribute" Inherit="true"/&gt;&#xD;
						&lt;HasAttribute CLRName="NUnit.Framework.FixtureTearDownAttribute" Inherit="true"/&gt;&#xD;
					&lt;/Or&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Group Region="Setup/Teardown"/&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--All other members--&gt;&#xD;
		&lt;Entry/&gt;&#xD;
&#xD;
		&lt;!--Test methods--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And Weight="100"&gt;&#xD;
					&lt;Kind Is="method"/&gt;&#xD;
					&lt;HasAttribute CLRName="NUnit.Framework.TestAttribute" Inherit="false"/&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;Name/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
		&lt;/Entry&gt;&#xD;
	&lt;/Pattern&gt;&#xD;
&#xD;
	&lt;!-- MVVM ViewModel pattern --&gt;&#xD;
	&lt;Pattern&gt;&#xD;
		&lt;Match&gt;&#xD;
			&lt;Name Is=".+ViewModel"/&gt;&#xD;
		&lt;/Match&gt;&#xD;
		&lt;!--public delegate--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And Weight="100"&gt;&#xD;
					&lt;Access Is="public"/&gt;&#xD;
					&lt;Kind Is="delegate"/&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;Name/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
			&lt;Group Region="Delegates"/&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--public enum--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And Weight="100"&gt;&#xD;
					&lt;Access Is="public"/&gt;&#xD;
					&lt;Kind Is="enum"/&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;Name/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
			&lt;Group&gt;&#xD;
				&lt;Name Region="${Name} enum"/&gt;&#xD;
			&lt;/Group&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--static fields and constants--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;Or&gt;&#xD;
					&lt;Kind Is="constant"/&gt;&#xD;
					&lt;And&gt;&#xD;
						&lt;Kind Is="field"/&gt;&#xD;
						&lt;Static/&gt;&#xD;
					&lt;/And&gt;&#xD;
				&lt;/Or&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;Kind Order="constant field"/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--instance fields--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And&gt;&#xD;
					&lt;Kind Is="field"/&gt;&#xD;
					&lt;Not&gt;&#xD;
						&lt;Static/&gt;&#xD;
					&lt;/Not&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;Readonly/&gt;&#xD;
				&lt;Name/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--Constructors. Place static one first--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;Or&gt;&#xD;
					&lt;Kind Is="constructor"/&gt;&#xD;
					&lt;Kind Is="destructor"/&gt;&#xD;
					&lt;And Weight="200"&gt;&#xD;
						&lt;Kind Is="method"/&gt;&#xD;
						&lt;Name Is="Dispose"/&gt;&#xD;
					&lt;/And&gt;&#xD;
				&lt;/Or&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;Static/&gt;&#xD;
				&lt;Kind Order="constructor destructor method"/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
			&lt;Group&gt;&#xD;
				&lt;!-- Hack: Grouping by readonly, which is never, to embrace everything --&gt;&#xD;
				&lt;Readonly Region="Constructors/Disposer"/&gt;&#xD;
			&lt;/Group&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--properties, indexers--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;Or&gt;&#xD;
					&lt;Kind Is="property"/&gt;&#xD;
					&lt;Kind Is="indexer"/&gt;&#xD;
				&lt;/Or&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Group&gt;&#xD;
				&lt;Access Region="Public Properties"/&gt;&#xD;
			&lt;/Group&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--Session factories--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And&gt;&#xD;
					&lt;Kind Is="method"/&gt;&#xD;
					&lt;Access Is="public"/&gt;&#xD;
					&lt;Name Is="Create.*Session"/&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;Name/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
			&lt;Group&gt;&#xD;
				&lt;Kind Region="Session factories"/&gt;&#xD;
			&lt;/Group&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--Session--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And&gt;&#xD;
					&lt;Kind Is="method"/&gt;&#xD;
					&lt;Or&gt;&#xD;
						&lt;Name Is="ShouldLoadSession"/&gt;&#xD;
						&lt;Name Is="LoadSession"/&gt;&#xD;
					&lt;/Or&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Group&gt;&#xD;
				&lt;Kind Region="Session handling"/&gt;&#xD;
			&lt;/Group&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--Parts--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And Weight="100"&gt;&#xD;
					&lt;Kind Is="method"/&gt;&#xD;
					&lt;Or&gt;&#xD;
						&lt;And&gt;&#xD;
							&lt;Access Is="private"/&gt;&#xD;
							&lt;Name Is="Load.*"/&gt;&#xD;
						&lt;/And&gt;&#xD;
						&lt;And&gt;&#xD;
							&lt;Access Is="protected"/&gt;&#xD;
							&lt;Name Is="LoadEntity"/&gt;&#xD;
						&lt;/And&gt;&#xD;
						&lt;And&gt;&#xD;
							&lt;Access Is="private"/&gt;&#xD;
							&lt;Name Is="Process.*"/&gt;&#xD;
						&lt;/And&gt;&#xD;
					&lt;/Or&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Group&gt;&#xD;
				&lt;Kind Region="Parts processors"/&gt;&#xD;
			&lt;/Group&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--interface implementations--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And Weight="100"&gt;&#xD;
					&lt;Kind Is="member"/&gt;&#xD;
					&lt;ImplementsInterface/&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;ImplementsInterface Immediate="true"/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
			&lt;Group&gt;&#xD;
				&lt;ImplementsInterface Immediate="true" Region="${ImplementsInterface} Members"/&gt;&#xD;
			&lt;/Group&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--all other members--&gt;&#xD;
		&lt;Entry/&gt;&#xD;
&#xD;
		&lt;!--nested types--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;Kind Is="type"/&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;Name/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
			&lt;Group&gt;&#xD;
				&lt;Name Region="${Name}"/&gt;&#xD;
			&lt;/Group&gt;&#xD;
		&lt;/Entry&gt;&#xD;
	&lt;/Pattern&gt;&#xD;
&#xD;
	&lt;!-- MVVM View pattern --&gt;&#xD;
	&lt;Pattern&gt;&#xD;
		&lt;Match&gt;&#xD;
			&lt;Name Is=".+View"/&gt;&#xD;
		&lt;/Match&gt;&#xD;
		&lt;!--public delegate--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And Weight="100"&gt;&#xD;
					&lt;Access Is="public"/&gt;&#xD;
					&lt;Kind Is="delegate"/&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;Name/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
			&lt;Group Region="Delegates"/&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--public enum--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And Weight="100"&gt;&#xD;
					&lt;Access Is="public"/&gt;&#xD;
					&lt;Kind Is="enum"/&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;Name/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
			&lt;Group&gt;&#xD;
				&lt;Name Region="${Name} enum"/&gt;&#xD;
			&lt;/Group&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--static fields and constants--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;Or&gt;&#xD;
					&lt;Kind Is="constant"/&gt;&#xD;
					&lt;And&gt;&#xD;
						&lt;Kind Is="field"/&gt;&#xD;
						&lt;Static/&gt;&#xD;
					&lt;/And&gt;&#xD;
				&lt;/Or&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;Kind Order="constant field"/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--instance fields--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And&gt;&#xD;
					&lt;Kind Is="field"/&gt;&#xD;
					&lt;Not&gt;&#xD;
						&lt;Static/&gt;&#xD;
					&lt;/Not&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;Readonly/&gt;&#xD;
				&lt;Name/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--Constructors. Place static one first--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;Or&gt;&#xD;
					&lt;Kind Is="constructor"/&gt;&#xD;
					&lt;Kind Is="destructor"/&gt;&#xD;
					&lt;And Weight="200"&gt;&#xD;
						&lt;Kind Is="method"/&gt;&#xD;
						&lt;Name Is="Dispose"/&gt;&#xD;
					&lt;/And&gt;&#xD;
				&lt;/Or&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;Static/&gt;&#xD;
				&lt;Kind Order="constructor destructor method"/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
			&lt;Group&gt;&#xD;
				&lt;!-- Hack: Grouping by readonly, which is never, to embrace everything --&gt;&#xD;
				&lt;Readonly Region="Constructors/Disposer"/&gt;&#xD;
			&lt;/Group&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--properties, indexers--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;Or&gt;&#xD;
					&lt;Kind Is="property"/&gt;&#xD;
					&lt;Kind Is="indexer"/&gt;&#xD;
				&lt;/Or&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Group&gt;&#xD;
				&lt;Access Region="Public Properties"/&gt;&#xD;
			&lt;/Group&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--events and event raisers--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;Or&gt;&#xD;
					&lt;Kind Is="event"/&gt;&#xD;
					&lt;And&gt;&#xD;
						&lt;Kind Is="method"/&gt;&#xD;
						&lt;Access Is="protected"/&gt;&#xD;
						&lt;Or&gt;&#xD;
							&lt;Virtual/&gt;&#xD;
							&lt;Override/&gt;&#xD;
						&lt;/Or&gt;&#xD;
						&lt;Name Is="On.+"/&gt;&#xD;
					&lt;/And&gt;&#xD;
				&lt;/Or&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;Kind Order="event method"/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
			&lt;Group Region="Events and event raisers"/&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--Page lifecycle--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And&gt;&#xD;
					&lt;Kind Is="method"/&gt;&#xD;
					&lt;Access Is="protected"/&gt;&#xD;
					&lt;Or&gt;&#xD;
						&lt;Name Is="OnPage.*"/&gt;&#xD;
						&lt;Name Is="CreateViewModel"/&gt;&#xD;
						&lt;Name Is="CreateDataContext"/&gt;&#xD;
						&lt;Name Is="ParseParameters"/&gt;&#xD;
					&lt;/Or&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;Name/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
			&lt;Group&gt;&#xD;
				&lt;Kind Region="Page lifecycle"/&gt;&#xD;
			&lt;/Group&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--Data processing--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And&gt;&#xD;
					&lt;Kind Is="method"/&gt;&#xD;
					&lt;Access Is="protected"/&gt;&#xD;
					&lt;Or&gt;&#xD;
						&lt;Name Is="CreateDataSession"/&gt;&#xD;
						&lt;Name Is="CreateDataSessionAsync"/&gt;&#xD;
						&lt;Name Is="OnDataLoadComplete"/&gt;&#xD;
						&lt;Name Is="OnDataLoadFailed"/&gt;&#xD;
					&lt;/Or&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;Name/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
			&lt;Group&gt;&#xD;
				&lt;Kind Region="Data processing"/&gt;&#xD;
			&lt;/Group&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--interface implementations--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And Weight="100"&gt;&#xD;
					&lt;Kind Is="member"/&gt;&#xD;
					&lt;ImplementsInterface/&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;ImplementsInterface Immediate="true"/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
			&lt;Group&gt;&#xD;
				&lt;ImplementsInterface Immediate="true" Region="${ImplementsInterface} Members"/&gt;&#xD;
			&lt;/Group&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--all other members--&gt;&#xD;
		&lt;Entry/&gt;&#xD;
&#xD;
		&lt;!--event handlers--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And&gt;&#xD;
					&lt;Kind Is="method"/&gt;&#xD;
					&lt;Access Is="private"/&gt;&#xD;
					&lt;!--Name Is=".+_.+"/--&gt;&#xD;
					&lt;HandlesEvent/&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;Name/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
			&lt;Group Region="Event handlers"/&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--nested types--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;Kind Is="type"/&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;Name/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
			&lt;Group&gt;&#xD;
				&lt;Name Region="${Name}"/&gt;&#xD;
			&lt;/Group&gt;&#xD;
		&lt;/Entry&gt;&#xD;
	&lt;/Pattern&gt;&#xD;
&#xD;
	&lt;!-- Order Machine.Specifications members: static fields, Establish, Cleanup, Because, It, behaviors, everything else --&gt;&#xD;
	&lt;Pattern&gt;&#xD;
		&lt;Match&gt;&#xD;
			&lt;And Weight="100"&gt;&#xD;
				&lt;Kind Is="class"/&gt;&#xD;
				&lt;Or&gt;&#xD;
					&lt;HasAttribute CLRName="Machine.Specifications.SubjectAttribute"&#xD;
							Inherit="true"/&gt;&#xD;
					&lt;Name Is="^when_.+"&#xD;
						IgnoreCase="true" /&gt;&#xD;
				&lt;/Or&gt;&#xD;
			&lt;/And&gt;&#xD;
		&lt;/Match&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And&gt;&#xD;
					&lt;Kind Is="field"/&gt;&#xD;
					&lt;Or&gt;&#xD;
						&lt;Access Is="protected"/&gt;&#xD;
						&lt;Static/&gt;&#xD;
					&lt;/Or&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
		&lt;/Entry&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And&gt;&#xD;
					&lt;Kind Is="field"/&gt;&#xD;
					&lt;Name Is="^context(_once)?$"&#xD;
						  IgnoreCase="true"/&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
		&lt;/Entry&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And&gt;&#xD;
					&lt;Kind Is="field"/&gt;&#xD;
					&lt;Name Is="^of$"&#xD;
						IgnoreCase="true"/&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
		&lt;/Entry&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And&gt;&#xD;
					&lt;Kind Is="field"/&gt;&#xD;
					&lt;Name Is="^after(_all)?$"&#xD;
						IgnoreCase="true"/&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
		&lt;/Entry&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And&gt;&#xD;
					&lt;Kind Is="field"/&gt;&#xD;
					&lt;Name Is="^should_.*$"&#xD;
						  IgnoreCase="true"/&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
		&lt;/Entry&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And&gt;&#xD;
					&lt;Kind Is="field"/&gt;&#xD;
					&lt;Not&gt;&#xD;
						&lt;Static/&gt;&#xD;
					&lt;/Not&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
		&lt;/Entry&gt;&#xD;
		&lt;!-- All other members --&gt;&#xD;
		&lt;Entry/&gt;&#xD;
	&lt;/Pattern&gt;&#xD;
	&#xD;
	&lt;!--Default pattern--&gt;&#xD;
	&lt;Pattern&gt;&#xD;
		&lt;!--public delegate--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And Weight="100"&gt;&#xD;
					&lt;Access Is="public"/&gt;&#xD;
					&lt;Kind Is="delegate"/&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;Name/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
			&lt;Group Region="Delegates"/&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--public enum--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And Weight="100"&gt;&#xD;
					&lt;Access Is="public"/&gt;&#xD;
					&lt;Kind Is="enum"/&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;Name/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
			&lt;Group&gt;&#xD;
				&lt;Name Region="${Name} enum"/&gt;&#xD;
			&lt;/Group&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--static fields and constants--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;Or&gt;&#xD;
					&lt;Kind Is="constant"/&gt;&#xD;
					&lt;And&gt;&#xD;
						&lt;Kind Is="field"/&gt;&#xD;
						&lt;Static/&gt;&#xD;
					&lt;/And&gt;&#xD;
				&lt;/Or&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;Kind Order="constant field"/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--instance fields--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And&gt;&#xD;
					&lt;Kind Is="field"/&gt;&#xD;
					&lt;Not&gt;&#xD;
						&lt;Static/&gt;&#xD;
					&lt;/Not&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;Readonly/&gt;&#xD;
				&lt;Name/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--Constructors. Place static one first--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;Or&gt;&#xD;
					&lt;Kind Is="constructor"/&gt;&#xD;
					&lt;Kind Is="destructor"/&gt;&#xD;
					&lt;And Weight="200"&gt;&#xD;
						&lt;Kind Is="method"/&gt;&#xD;
						&lt;Name Is="Dispose"/&gt;&#xD;
					&lt;/And&gt;&#xD;
				&lt;/Or&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;Static/&gt;&#xD;
				&lt;Kind Order="constructor destructor method"/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
			&lt;Group&gt;&#xD;
				&lt;!-- Hack: Grouping by readonly, which is never, to embrace everything --&gt;&#xD;
				&lt;Readonly Region="Constructors/Disposer"/&gt;&#xD;
			&lt;/Group&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--properties, indexers--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;Or&gt;&#xD;
					&lt;Kind Is="property"/&gt;&#xD;
					&lt;Kind Is="indexer"/&gt;&#xD;
				&lt;/Or&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Group&gt;&#xD;
				&lt;Access Region="Public Properties"/&gt;&#xD;
			&lt;/Group&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--events and event raisers--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;Or&gt;&#xD;
					&lt;Kind Is="event"/&gt;&#xD;
					&lt;And&gt;&#xD;
						&lt;Kind Is="method"/&gt;&#xD;
						&lt;Access Is="protected"/&gt;&#xD;
						&lt;Or&gt;&#xD;
							&lt;Virtual/&gt;&#xD;
							&lt;Override/&gt;&#xD;
						&lt;/Or&gt;&#xD;
						&lt;Name Is="On.+"/&gt;&#xD;
					&lt;/And&gt;&#xD;
				&lt;/Or&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;Kind Order="event method"/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
			&lt;Group Region="Events and event raisers"/&gt;&#xD;
		&lt;/Entry&gt;&#xD;
		&#xD;
		&lt;!--interface implementations--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And Weight="100"&gt;&#xD;
					&lt;Kind Is="member"/&gt;&#xD;
					&lt;ImplementsInterface/&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;ImplementsInterface Immediate="true"/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
			&lt;Group&gt;&#xD;
				&lt;ImplementsInterface Immediate="true" Region="${ImplementsInterface} Members"/&gt;&#xD;
			&lt;/Group&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--event handlers--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;And&gt;&#xD;
					&lt;Kind Is="method"/&gt;&#xD;
					&lt;Access Is="private"/&gt;&#xD;
					&lt;!--Name Is=".+_.+"/--&gt;&#xD;
					&lt;HandlesEvent/&gt;&#xD;
				&lt;/And&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;Name/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
			&lt;Group Region="Event handlers"/&gt;&#xD;
		&lt;/Entry&gt;&#xD;
&#xD;
		&lt;!--all other members--&gt;&#xD;
		&lt;Entry/&gt;&#xD;
&#xD;
		&lt;!--nested types--&gt;&#xD;
		&lt;Entry&gt;&#xD;
			&lt;Match&gt;&#xD;
				&lt;Kind Is="type"/&gt;&#xD;
			&lt;/Match&gt;&#xD;
			&lt;Sort&gt;&#xD;
				&lt;Name/&gt;&#xD;
			&lt;/Sort&gt;&#xD;
			&lt;Group&gt;&#xD;
				&lt;Name Region="Nested type: ${Name}"/&gt;&#xD;
			&lt;/Group&gt;&#xD;
		&lt;/Entry&gt;&#xD;
	&lt;/Pattern&gt;&#xD;
&lt;/Patterns&gt;&#xD;
</s:String>
	<s:String x:Key="/Default/CodeStyle/CSharpMemberOrderPattern/LayoutType/@EntryValue">CustomLayout</s:String>
	<s:Boolean x:Key="/Default/CodeStyle/Generate/=EqualityMembers/@KeyIndexDefined">True</s:Boolean>
	<s:String x:Key="/Default/CodeStyle/Generate/=EqualityMembers/Options/=ChangeEquals/@EntryIndexedValue">Skip</s:String>
	<s:String x:Key="/Default/CodeStyle/Generate/=EqualityMembers/Options/=EqualityOperators/@EntryIndexedValue">False</s:String>
	<s:String x:Key="/Default/CodeStyle/Generate/=EqualityMembers/Options/=ImplementIEquatable/@EntryIndexedValue">False</s:String>
	<s:String x:Key="/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=PrivateInstanceFields/@EntryIndexedValue">&lt;Policy Inspect="True" Prefix="_" Suffix="" Style="aaBb" /&gt;</s:String>
	<s:String x:Key="/Default/CodeStyle/Naming/CSharpNaming/PredefinedNamingRules/=PrivateStaticFields/@EntryIndexedValue">&lt;Policy Inspect="True" Prefix="" Suffix="" Style="aaBb" /&gt;</s:String>
	<s:String x:Key="/Default/CodeStyle/Naming/CSharpNaming/UserRules/=b6a724e9_002D28eb_002D4602_002Dba93_002Dad45318b8997/@EntryIndexedValue">&lt;Policy&gt;&lt;Descriptor Staticness="Static, Instance" AccessRightKinds="Private, Protected, ProtectedInternal, Internal, Public" Description="Machine.Specifications Rules"&gt;&lt;ElementKinds&gt;&lt;Kind Name="Machine.Specifications_Behavior" /&gt;&lt;Kind Name="Machine.Specifications_Context" /&gt;&lt;Kind Name="Machine.Specifications_Specification" /&gt;&lt;Kind Name="Machine.Specifications_SupportingField" /&gt;&lt;Kind Name="Machine.Specifications_Field" /&gt;&lt;Kind Name="Machine.Specifications_Constant" /&gt;&lt;Kind Name="Machine.Specifications_Local" /&gt;&lt;/ElementKinds&gt;&lt;/Descriptor&gt;&lt;Policy Inspect="True" Prefix="" Suffix="" Style="aaBb_aaBb"&gt;&lt;ExtraRule Prefix="" Suffix="" Style="AaBb" /&gt;&lt;/Policy&gt;&lt;/Policy&gt;</s:String>
	<s:String x:Key="/Default/CodeStyle/Naming/XamlNaming/UserRules/=XAML_005FFIELD/@EntryIndexedValue">&lt;Policy Inspect="True" Prefix="" Suffix="" Style="AaBb"&gt;&lt;ExtraRule Prefix="" Suffix="" Style="aaBb" /&gt;&lt;/Policy&gt;</s:String>
	<s:String x:Key="/Default/FilterSettingsManager/CoverageFilterXml/@EntryValue">&lt;data&gt;&lt;IncludeFilters /&gt;&lt;ExcludeFilters /&gt;&lt;/data&gt;</s:String>
	<s:String x:Key="/Default/FilterSettingsManager/AttributeFilterXml/@EntryValue">&lt;data /&gt;</s:String></wpf:ResourceDictionary>